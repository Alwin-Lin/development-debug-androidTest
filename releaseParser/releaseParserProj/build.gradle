// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.0-beta05'
        // https://github.com/google/protobuf-gradle-plugin
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
}

// https://docs.gradle.org/current/userguide/custom_plugins.html#sec:custom_plugins_standalone_project
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'com.google.protobuf'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// These are variables that needs to be changed bassed on your project.
def srcRoot = '../releaseParserSrc'
def javSrc = srcRoot + '/src'
def generatedSrc = './build/generated/source/proto/main/java'
def testSrc = srcRoot + '/tests/src'
def testResource = srcRoot + '/tests/resources'
def protoSrc = srcRoot + '/proto'
def libRoot = '../libs'
// Java version must be greater than Java 9
// For Windows 
ext.java_home = System.getenv('JAVA_HOME') 
def testExecutePath = java_home + '/bin/java'

defaultTasks 'uberJar'

// Customize https://guides.gradle.org/building-java-libraries/
jar {
    sourceSets {
        main {
            java.srcDirs = [javSrc , generatedSrc]
            proto {
                // Adds .proto files under protSrc to srcDir
                srcDir protoSrc
            }
        }
        test {
            java.srcDirs = [testSrc]
            resources.srcDirs = [testResource]
        }
    }

    protobuf {
        // Configure the protoc executable
        protoc {
            // Download from repositories
            artifact = 'com.google.protobuf:protoc:3.11.0'
        }
    }
}

test {
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    // executable('C:\\Program Files\\Java\\jdk-14.0.1\\bin\\java.exe')
    executable testExecutePath
}

// Create \releaseParserProj\build\libs\releaseParserProj.jar
// https://docs.gradle.org/current/userguide/working_with_files.html#sec:creating_uber_jar_example
task uberJar(type: Jar) {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'com.android.cts.releaseparser.Main'
        )
    }
    archiveFileName = "releaseParser.jar"
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

dependencies {
    compile 'com.google.protobuf:protobuf-java:3.11.0'
    // Include every .jav under libRoot
    compile fileTree(dir: libRoot, include: ["*.jar"])
    compile group: 'commons-io', name: 'commons-io', version: '2.0.1'
}

